generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipient {
  id           String         @id @default(uuid())
  cpf          String         @unique
  email        String         @unique
  name         String
  phone        String
  password     String
  orders       Order[]
  addresses    Address[]
  notifications Notification[]

  @@map("recipients")
}

model DeliveryMan {
  id                   String  @id @default(uuid())
  cpf                  String  @unique
  name                 String
  phone                String
  password             String
  deliveryManLatitude  Decimal
  deliveryManLongitude Decimal
  orders               Order[]

  @@map("delivery_mens")
}

model Address {
  id           String  @id @default(uuid())
  recipientId  String  @unique
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipcode      String
  latitude     Decimal
  longitude    Decimal

  orders    Order[]
  recipient Recipient @relation(fields: [recipientId], references: [id])

  @@map("addresses")
}

enum OrderStatus {
  pending
  awaiting
  inTransit
  delivered
  returned
}

model Order {
  id                   String      @id @default(uuid())
  recipientId          String      @map("recipient_id")
  deliveryManId        String?     @map("delivery_man_id")
  addressId            String      @map("address_id")
  title                String
  content              String
  status               OrderStatus
  isRemovable          Boolean     @map("is_removable")
  paymentMethod        String      @map("payment_method")
  createdAt            DateTime    @default(now()) @map("created_at")
  updatedAt            DateTime?   @updatedAt @map("updated_at")
  expectedDeliveryDate DateTime?   @map("expect_delivery_date")
  deliveryLatitude     Float       @map("delivery_latitude")
  deliveryLongitude    Float       @map("delivery_longitude")
  shipping             Float

  recipient  Recipient    @relation(fields: [recipientId], references: [id])
  delivery   DeliveryMan? @relation(fields: [deliveryManId], references: [id])
  address    Address      @relation(fields: [addressId], references: [id])
  attachments Attachment[]

  @@map("orders")
}

model Attachment {
  id      String @id @default(uuid())
  title   String
  url     String
  orderId String @map("order_id")

  order Order @relation(fields: [orderId], references: [id])

  @@map("attachments")
}

model Notification {
  id        String    @id @default(uuid())
  recipientId String
  title     String
  content   String
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")

  recipient   Recipient @relation(fields: [recipientId], references: [id])
  @@map("notifications")
}
